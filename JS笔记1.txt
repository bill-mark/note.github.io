1.基本语法
  var x=1;和x=1;都可以声明变量，但后者没有通过var申明就被使用，该变量自动被申明为全局变量
在strict模式下运行的JavaScript代码，强制通过var申明变量，未使用var申明变量就使用的，将导致运行错误。
启用strict模式的方法是在JavaScript代码的第一行写上：
'use strict';

  ''或""本身只是一种表示方式，不是字符串的一部分，因此，字符串'abc'只有a，b，c这3个字符
  
2.数据类型
  由于JavaScript设计缺陷，不要使用==比较，因为它会自动转换数据类型再比较。
所以要坚持使用===比较。
  
  属性NaN是not a number的缩写，表示该值不是数字。//方法 parseInt() 和 parseFloat() 在不能解析指定的字符串时就返回这个值。对于一些常规情况下返回有效数字的函数，也可以采用这种方法，用 Number.NaN 说明它的错误情况。//NaN 与其他数值进行比较的结果总是不相等的，包括它自身在内，只能调用 isNaN() 来比较 isNaN(NaN); // true  //
var Month=30;
if (Month < 1 || Month > 12)
{
Month = Number.NaN;
}
document.write(Month);

  浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：
Math.abs(1 / 3 - (1 - 2 / 3)) < 0.0000001; // true

  null表示一个空的值，而undefined表示值未定义，大多数情况下，我们都应该用null。undefined仅仅在判断函数参数是否传递的情况下有用。

3.数组
  一种创建数组的方法是通过Array()函数实现：
  var a = new Array(1, 2, 3); // 创建了数组a[1, 2, 3]

  另一种直接使用[]：var a = [1, 2, 3.14, 'Hello', null, true];建议用这种。
  
  如果通过索引赋值时，索引超过了范围，同样会引起Array大小的变化：
      var arr = [1, 2, 3];
      arr[5] = 'x';
      arr; // arr变为[1, 2, 3, undefined, undefined, 'x']

   slice()就是对应String的substring()版本，它截取Array的部分元素，然后返回一个新的Array：
var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
arr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']
arr.slice(3); // 从索引3开始到结束: ['D', 'E', 'F', 'G']

    splice(x,y,'A','B')
    表示从索引x开始（包括x位），删除y个元素，然后再从该位置添加A，B元素 
   
    join() 把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：
var arr = ['A', 'B', 'C', 1, 2, 3];
arr.join('-'); // 'A-B-C-1-2-3'

4.对象
  JavaScript的对象是一组由键-值组成的无序集合，
JavaScript对象的所有属性都是字符串,属性对应的值可以是任意数据类型
例如：
var person = {
    name: 'Bob',
    age: 20,
    tags: ['js', 'web', 'mobile'],
    city: 'Beijing',
    hasCar: true,
    zipcode: null
}

5.字符串
  JavaScript的字符串就是用''或""括起来的字符表示，空格也算一个字符。
  字符串是不可变的，关于字符串的方法本身不会改变原有字符串的内容，而是返回一个新字符串

  substring()返回指定索引区间的子串：
var s = 'hello, world'
s.substring(0, 5); // 从索引0开始到5（不包括5），返回'hello'
s.substring(7); // 从索引7开始到结束，返回'world'

6.如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果：

7.substring()返回指定索引区间的子串：
var s = 'hello, world'
s.substring(0, 5); // 从索引0开始到5（不包括5），返回'hello'

8.对象属性
  var xiaoming = {
    name: '小明',
   }
  'name' in xiaoming; // true
  如果in判断一个属性存在，这个属性不一定是xiaoming的，它可能是xiaoming继承得到的。
  因为属性名定义在对象中，而所有对象最终都会在原型链上指向object，所以xiaoming也拥有toString属性。

  要判断一个属性是否是xiaoming自身拥有的，而不是继承得到的，可以用hasOwnProperty()方法

9.条件判断

  9.1如果if的条件判断语句结果不是true或false怎么办？例如：

```
var s = '123';
if (s.length) { // 条件计算结果为3
    //
}
```

JavaScript把null、undefined、0、NaN和空字符串''视为false，其他值一概视为true，因此上述代码条件判断的结果是true。

10.循环
 for循环的一个变体是for ... in循环，它可以把一个对象的所有属性依次循环出来：
 

```
var o = {
    name: 'Jack',
    age: 20,
    city: 'Beijing'
};
for (var key in o) {
    alert(key); // 'name', 'age', 'city'
}
```

要过滤掉对象继承的属性，用hasOwnProperty()来实现：

```
var o = {
    name: 'Jack',
    age: 20,
    city: 'Beijing'
};
for (var key in o) {
    if (o.hasOwnProperty(key)) {
        alert(key); // 'name', 'age', 'city'
    }
}
```

由于Array也是对象，而它的每个元素的索引被视为对象的属性，因此，for ... in循环可以直接循环出Array的索引：

```
var a = ['A', 'B', 'C'];
for (var i in a) {
    alert(i); // '0', '1', '2'
    alert(a[i]); // 'A', 'B', 'C'
}
```

请注意，for ... in对Array的循环得到的是String而不是Number

11.函数
  约定 首字母大写为全局函数，小写为普通函数
  函数末尾如果没有return，默认return undefined;
  11.1如果没有return语句，函数执行完毕后也会返回结果，只是结果为undefin

  11.2由于JavaScript的函数也是一个对象，下述定义的abs()函数实际上是一个函数对象，而函数名abs可以视为指向该函数的变量。
因此，第二种定义函数的方式如下：
var abs = function (x) {
    if (x >= 0) {
        return x;
    } else {
        return -x;
    }
};

   new function（''）
   在NodeJS和浏览器的全局环境中执行某些操作 ，需要用到new function('')
  
  11.3JavaScript允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没有问题，虽然函数内部并不需要这些参数：

abs(10, 'blablabla'); // 返回10
abs(-9, 'haha', 'hehe', null); // 返回9
传入的参数比定义的少也没有问题：

abs(); // 返回NaN
此时abs(x)函数的参数x将收到undefined，计算结果为NaN。

要避免收到undefined，可以对参数进行检查：

```
function abs(x) {
    if (typeof x !== 'number') {
        throw 'Not a number';
    }
```

  11.4  arguments，函数内置属性，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments类似Array但它不是一个Array。
  arguments最常用于判断传入参数的个数。
// foo(a, [b], c)
// 接收2~3个参数，b是可选参数，如果只传2个参数，b默认为null：
function foo(a, b, c) {
    if (arguments.length === 2) {
        // 实际拿到的参数是a和b，c为undefined
        c = b; // 把b赋给c
        b = null; // b变为默认值
    }
}

  11.5变量和作用域
    函数被视为变量
    内部函数可以访问外部函数定义的变量，反过来则不行：
    先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部，但不会提升变量y的赋值
function foo() {
    var x = 'Hello, ' + y;
    alert(x);
    var y = 'Bob';
}

foo()

JavaScript引擎看到的代码相当于：

function foo() {
    var y; // 提升变量y的申明
    var x = 'Hello, ' + y;
    alert(x);
    y = 'Bob';
}
 
  JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性，
var course = 'Learn JavaScript';
alert(course); // 'Learn JavaScript'
alert(window.course); // 'Learn JavaScript'
 
  以变量方式var foo = function () {}定义的函数实际上是一个全局变量
// 唯一的全局变量MYAPP:
var MYAPP = {};

// 其他变量:
MYAPP.name = 'myapp';
MYAPP.version = 1.0;

// 其他函数:
MYAPP.foo = function () {
    return 'foo';
};


JavaScript的变量作用域实际上是函数内部，在for循环等语句块中是无法定义具有局部作用域的变量的：

'use strict';

function foo() {
    for (var i=0; i<100; i++) {
        //
    }
    i += 100; // 仍然可以引用变量i
}
为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：（还未被支持）

'use strict';

function foo() {
    var sum = 0;
    for (let i=0; i<100; i++) {
        sum += i;
    }
    i += 1; // SyntaxError  
}

11.6方法 this
  绑定了对象的函数，成为该对象的方法。
  this是一个特殊变量，它始终指向当前对象，this.month即obj.month；
  this在对象外部出现，则会指向全局对象window.
function getAge() {
    var y = new Date().getFullYear();
    return y - this.birth;
}
var xiaoming = {
    name: '小明',
    birth: 1990,
    age: getAge
};
xiaoming.age(); // 25, 正常结果
getAge(); // NaN
   如果在函数1内部又定义一个函数2，则函数2内部的this指向全局变量，strict模式下指向undefined

  this的正确用法：用一个that变量首先捕获this：
var xiaoming = {
    name: '小明',
    birth: 1990,
    age: function () {
        var that = this; // 在方法内部一开始就捕获this
        function getAgeFromBirth() {
            var y = new Date().getFullYear();
            return y - that.birth; // 用that而不是this
        }
        return getAgeFromBirth();
    }
};
xiaoming.age(); // 25

   this的另一个用法 用函数自带的apply方法控制this指向，接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。
function getAge() {
    var y = new Date().getFullYear();
    return y - this.birth;
}
var xiaoming = {
    name: '小明',
    birth: 1990,
    age: getAge
};
getAge.apply(xiaoming, []); // 26

12.高阶函数
  接收函数作为参数的函数为高阶函数
function add(x, y, f) {
    return f(x) + f(y);
}

12.1高阶方法 map()
   当函数被抽象作为变量的参数被参数执行，就是map。返回值为数组
function pow(x) {
    return x * x;
}
var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
arr.map(pow); // [1, 4, 9, 16, 25, 36, 49, 64, 81]
数据需要批量执行时需要。

12.2高阶方法 reduce()
    循环处理数组的第一个值和第二个值，并把结果和下一个值继续处理，直到
最后一个值，就是方法reduce()。必须接受两个参数
[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)

   求和
var arr = [1, 3, 5, 7, 9];
arr.reduce(function (x, y) {
    return x + y;
}); // 25
      

12.3高阶方法filter()
  用于筛选数组，filter()把传入的函数依次作用于每个元素，然后根据返回值
是true还是false决定保留还是丢弃该元素。
var arr = [1, 2, 4, 5, 6, 9, 10, 15];
var r = arr.filter(function (x) {
    return x % 2 !== 0;
});
r; // [1, 5, 9, 15]

12.4高阶函数sort（）
  Array的sort()方法是用于排序的，默认把所有元素先转换为String
再根据ASCII码进行升序排序。所以默认排序10会在2前面，返回的结果仍是当前Array
  主流用接收一个比较函数来实现自定义的排序
按数字大小排序，我们可以这么写：

var arr = [10, 20, 1, 2];
arr.sort(function (x, y) {
    if (x < y) {
        return -1;
    }
    if (x > y) {
        return 1;
    }
    return 0;
}); // [1, 2, 10, 20]

13.闭包函数
 不直接返回结果，携带状态让后面可以调用的函数属于闭包函数。
js不能像java那样直接用private把一个对象
封装成一个私有变量，只能借助闭包来封装一个函数。
 例子：不需要立刻求和，而是在后面的代码中，根据需要再计算
function lazy_sum(arr) {
    var sum = function () {
        return arr.reduce(function (x, y) {
            return x + y;
        });
    }
    return sum;
}
当需要就和时，可以
var f = lazy_sum([1, 2, 3, 4, 5]); // function sum()
f(); // 15

    闭包函数会等到内部函数循环完才执行，所以返回函数不要直接引用任何循环变量，
或者后续会发生变化的变量
function count() {
    var arr = [];
    for (var i=1; i<=3; i++) {  //返回函数
        arr.push(function () {
            return i * i;
        });
    }
    return arr;
}
var results = count();
var f1 = results[0];  //16
 
  若要引用循环变量，要再创建一个函数，用该函数的参数绑定循环变量当前的值，
无论该循环变量后续如何更改，已绑定到函数参数的值不变
  
  闭包一般用法，封装函数
function make_pow(n) {
    return function (x) {
        return Math.pow(x, n);
    }
}
// 创建两个新函数:
var pow2 = make_pow(2);
var pow3 = make_pow(3);
pow2(5); // 25
pow3(7); // 343

14.箭头函数 ES6标准  
  箭头函数相当于简化了函数定义的匿名函数，不同的是箭头函数内部的this
是词法作用域，由上下文确定
var f = function(v) {
  return v;
};
上面函数用箭头函数表示为：
var f = v => v;

或者
x => {
   return x * x;
}

  箭头函数修复了this的指向，this总是指向词法作用域，也就是外层调用者obj
用call()或者apply()调用箭头函数时，无法对this进行绑定，即传入的第一个参数被忽略
函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象

15 generator 生成器
   
function* foo(x) {
    yield x + 1;
    yield x + 2;
    return x + 3;
}
   generator由function*定义（注意多出的*号），并且，除了return语句，
还可以用yield返回多次

16.包装对象（自定义数据尽量避免使用）
   typeof操作符获取对象的类型，返回一个字符串
typeof 123; // 'number'
typeof NaN; // 'number'
typeof 'str'; // 'string'
typeof true; // 'boolean'
typeof undefined; // 'undefined'
typeof Math.abs; // 'function'
typeof null; // 'object'
typeof []; // 'object'
typeof {}; // 'object'

   new 用来把对象包装为相同的数据类型
var n = new Number(123); // 'object'
var b = new Boolean(true); // 'object'
var s = new String('str'); // 'object'
  当不用new关键字，类型为原来类型
var n = Number('123'); // 123，相当于parseInt()或parseFloat()
typeof n; // 'number'

   类型变了 就不相等了，大多情况要避免使用new
typeof new Number(123); // 'object'
new Number(123) === 123; // false 

17.Date
  Date对象用来表示日期和时间
  JavaScript的月份范围用整数表示是0~11，0表示一月，1表示二月


18.RegExp (正则表达式)

判断一个字符串是否是合法的Email的方法是：
1.创建一个匹配Email的正则表达式；
2.用该正则表达式去匹配用户的输入来判断是否合法

  /正则表达式/  代表正则表达式

  两种方式创建正则表达式，RegExp中因为字符串的转义问题，
字符串的两个\\实际上是一个\
var re1 = /^\d{3}\-\d{3,8}$/;
var re2 = new RegExp(' /^\d{3}\-\d{3,8}$/');
re1.test('010-12345'); // true
re1.test('010-1234x'); // false

  用正则表达式切分字符串比用固定的字符更灵活
'a b   c'.split(' '); // ['a', 'b', '', '', 'c']
无法识别连续的空格，用正则表达就可以：
'a b   c'.split(/\s+/); // ['a', 'b', 'c']

  分组
  如果正则表达式中定义了组，可以在RegExp对象上用exec()方法
提取出子串来，返回一个Array，第一个元素是正则表达式匹配到的
整个字符串，后面的字符串表示匹配成功的子串

   ^(\d{3})-(\d{3,8})$  表示分别定义了两个组，可以直接从匹配的
字符串中提取出区号和本地号码：

var re = /^(\d{3})-(\d{3,8})$/;
re.exec('010-12345'); // ['010-12345', '010', '12345']
re.exec('010 12345'); // null

  匹配原则
  默认贪婪匹配，加个?就可以采用非贪婪匹配

不加? \d+采用贪婪匹配，直接把后面的0全部匹配，0*只能匹配空字符串
var re = /^(\d+)(0*)$/;
re.exec('102300'); // ['102300', '102300', '']

加?
var re = /^(\d+?)(0*)$/;
re.exec('102300'); // ['102300', '1023', '00']

  全局搜索
  g表示全局匹配
  
var r1 = /test/g;
// 等价于:
var r2 = new RegExp('test', 'g')

19.JSON
  JavaScript Object Notation的缩写，它是一种数据交换格式

  number：和JavaScript的number完全一致；
  boolean：就是JavaScript的true或false；
  string：就是JavaScript的string；
  null：就是JavaScript的null；
  array：就是JavaScript的Array表示方式――[]；
  object：就是JavaScript的{ ... }表示方式

  字符集是UTF-8,字符串用双引号""，Object的键也必须用双引号""

  把对象序列化成一个JSON格式的字符串，就能够通过网络传递给其他计算机。
  收到一个JSON格式的字符串，只需要反序列化成一个JavaScript对象，就
可以在JavaScript中直接使用这个对象了
  
  数据在名称/值对中；数据由逗号分隔；花括号保存对象；方括号保存数组


  序列化
  var xiaoming = {
    name: '小明',
    age: 14,
    gender: true,
    height: 1.65,
    grade: null,
    'middle-school': '\"W3C\" Middle School',
    skills: ['JavaScript', 'Java', 'Python', 'Lisp']
};
结果1
JSON.stringify(xiaoming); 
"{"name":"小明","age":14,"gender":true,"height":1.65,"grade":null,"middle-school":"\"W3C\" Middle School","skills":["JavaScript","Java","Python","Lisp"]}"

结果2
JSON.stringify(xiaoming, ['name', 'skills'], '  ');
                              指定属性        首行缩进两个空格
{
  "name": "小明",
  "skills": [
    "JavaScript",
    "Java",
    "Python",
    "Lisp"
  ]
} 

   还可以传入一个函数，对象的每个键值对会被函数先处理   
JSON.stringify(xiaoming, convert, '  ');
    
  可以给xiaoming定义一个toJSON()的方法，直接返回JSON应该序列化的数据
var xiaoming = {
    name: '小明',
    age: 14,
    gender: true,
    height: 1.65,
    grade: null,
    'middle-school': '\"W3C\" Middle School',
    skills: ['JavaScript', 'Java', 'Python', 'Lisp'],
    toJSON: function () {
        return { // 只输出name和age，并且改变了key：
            'Name': this.name,
            'Age': this.age
        };
    }
};
JSON.stringify(xiaoming); // '{"Name":"小明","Age":14}'

  
   反序列化
   JSON.parse()把JSON格式的字符串变成一个JavaScript对象
JSON.parse('{"name":"小明","age":14}'); // Object {name: '小明', age: 14}
 
   JSON.parse()还可以接收一个函数，用来转换解析出的属性：
JSON.parse('{"name":"小明","age":14}', function (key, value) {
    // 把number * 2:
    if (key === 'name') {
        return value + '同学';
    }
    return value;
}); // Object {name: '小明同学', age: 14}

20.js实现面向编程的方法
  绑定了对象的函数，叫做该对象的方法
  绑定了类的对象，  叫做该类的实例
  
  JavaScript没有“Class”的概念，创建一个对象默认创建的也是类
所以JS中对象是自己的实例，所以JS没有继承父类的概念。

  JS中的继承不是继承父类，而是继承别的对象。obj.__proto__
  原型对象最终会指向根对象Object.prototype
 var Bird = {
    fly: function () {
        console.log(this.name + ' is flying...');
    }
};

xiaoming.__proto__ = Bird;

xiaoming.fly(); // 小明 is flying...

20.1原型链
  每个对象创建时如果不自定义，默认会指向数据原型对象。

  var ss = [1, 2, 3]; //数据类型为数组，所以会指向数组
  其原型链是：
  ss ----> Array.prototype ----> Object.prototype ----> null
把ss定义为数组，所以指向Array.prototype，能调用数组的indexOf()、shift()等方法
  创建的函数也是一个对象，也会有原型链
foo ----> Function.prototype ----> Object.prototype ----> null
foo可以调用Function.prototype定义的apply()等方法

20.2构造函数
  var ss = new Array(1,2,3); 属于构造数组（或建造数组）
  同理，
     var Student =  Function(name))
          { this.name = name;} 
     var  xiaoming = new Student('小明');
          xiaoming.name; // '小明'
     var  xiaohong = new Student('小红');
          xiaohong.name; // '小红'
     xiaoming.hello === xiaohong.hello; // false
   属于构造函数。区别是，被构造的函数要先声明,当用关键字new来调用这个
函数时，this会指向新创建的对象，并默认返回this。
   通过new Student()创建的很多对象，只需要共享同一个函数就可以了，节省内存。

  xiaoming ----> Student.prototype ----> Object.prototype ----> null

  new 方法创建的对象会获得原型的constructor属性，
可通过constructor返回创建该对象的函数。

  要让创建的对象共享一个hello函数，根据对象的属性查找原则，给xiaoming、xiaohong这些对象共同的原型加个hello函数就可以了。
function Student(name) {
    this.name = name;
}

Student.prototype.hello = function () {
    alert('Hello, ' + this.name + '!');
};


   构造函数的意义
  如果创建的对象有很多属性，我们只需要传递需要的某些属性，剩下的属性可以用默认值。由于参数是一个Object，我们无需记忆参数的顺序。如果恰好从JSON拿到了一个对象，就可以直接创建出xiaoming
  例子
function Student(props) {
    this.name = props.name || '匿名'; // 默认值为'匿名'
    this.grade = props.grade || 1; // 默认值为1
}

Student.prototype.hello = function () {
    alert('Hello, ' + this.name + '!');
};

function createStudent(props) {
    return new Student(props || {})
}
这个createStudent()函数有几个巨大的优点：一是不需要new来调用，二是参数非常灵活，可以不传，也可以这么传：

var xiaoming = createStudent({
    name: '小明'
});

xiaoming.grade; // 1

20.3原型继承
  
20.4 es6标准-类继承
 
  用函数实现Student的方法：

function Student(name) {
    this.name = name;
}

Student.prototype.hello = function () {
    alert('Hello, ' + this.name + '!');
}
  如果用新的class关键字来编写Student，可以这样写：

class Student {
    constructor(name) {
        this.name = name;
    }

    hello() {
        alert('Hello, ' + this.name + '!');
    }
}

创建一个Student对象代码和前面一样：

var xiaoming = new Student('小明');
xiaoming.hello();

21浏览器对象
  浏览器提供很多对象给js使用，

(1)window
  window对象不但充当全局作用域，而且表示浏览器窗口

  innerWidth和innerHeight属性，可以获取浏览器窗口的内部宽度和高度
  outerWidth和outerHeight属性，可以获取浏览器窗口的整个宽高
alert('window inner size: ' + window.innerWidth + ' x ' + window.innerHeight);

(2)navigator
  navigator对象表示浏览器的信息

  navigator.appName：浏览器名称；
  navigator.appVersion：浏览器版本

(3)screen
  screen对象表示屏幕的信息

  screen.width：屏幕宽度，以像素为单位；
  screen.height：屏幕高度，以像素为单位；

(4)location
  location对象表示当前页面的URL信息

(5)document
  document对象表示当前页面。由于HTML在浏览器中以DOM形式表示为树形结构
document对象就是整个DOM树的根节点

  节点Document自动绑定为全局变量document  。 

  用document对象提供的getElementById()和getElementsByTagName()可以
按ID获得一个DOM节点和按Tag名称获得一组DOM节点

  document对象还有一个cookie属性，可以获取当前页面的Cookie。
  服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将
不能被JavaScript读取

22 DOM
 
 DOM就是网页的API，

（1）操作一个DOM节点实际上就是这么几个操作：

更新：更新该DOM节点的内容，相当于更新了该DOM节点表示的HTML的内容；

遍历：遍历该DOM节点下的子节点，以便进行进一步操作；

插入：在该DOM节点下新增一个子节点，相当于动态增加了一个HTML节点；

删除：将该节点从HTML中删除，相当于删掉了该DOM节点的内容以及它包含的所有子节点。  

（2）精确地选择DOM，要先定位父节点，再从父节点开始选择

/ 先定位ID为'test-table'的节点，再返回其内部所有tr节点：
var trs = document.getElementById('test-table').getElementsByTagName('tr');

// 先定位ID为'test-div'的节点，再返回其内部所有class包含red的节点：
var reds = document.getElementById('test-div').getElementsByClassName('red');

（3）更新DOM（把子节点改变为其他节点）

第一种方法:innerHTML
  会替换从对象的起始位置到终止位置的全部内容,包括Html标签

<div id="test"> 
<span style="color:red">test1</span> test2 
</div> 

var p = document.getElementById('test');
// 设置文本为abc:
p.innerHTML = 'ABC'; 
<div id="test"> 
ABC
</div> 


第二种方法：修改innerText或textContent //部分浏览器不支持，不使用
  只能改变标签里面的内容，只支持普通字符串

// 获取<p id="p-id">javascript</p>
var p = document.getElementById('p-id');
// 修改文本为JavaScript:
p.innerText = "JavaScript";

（4）通过DOM 修改 CSS

  DOM节点的style属性对应所有的CSS，可以直接获取或设置
CSS允许font-size在JavaScript中改写为驼峰式命名fontSize

// 获取<p id="p-id">...</p>
var p = document.getElementById('p-id');
// 设置CSS:
p.style.color = '#ff0000';


（5）插入DOM（在子节点插入另一个子节点）

1.appendChild  

把已有的一个节点插入到另一个节点最后一个子节点后面
<p id="js">JavaScript</p>
<div id="list">
    <p id="java">Java</p>
    <p id="python">Python</p>
    <p id="scheme">Scheme</p>
</div>
 var
    js = document.getElementById('js'),
    list = document.getElementById('list');
list.appendChild(js);

效果
<div id="list">
    <p id="java">Java</p>
    <p id="python">Python</p>
    <p id="scheme">Scheme</p>
    <p id="js">JavaScript</p>
</div>

创建一个节点并插入到了另一个节点最后一个子节点后面
var
    list = document.getElementById('list'),
    haskell = document.createElement('p');
haskell.id = 'haskell';
haskell.innerText = 'Haskell';
list.appendChild(haskell);

效果
<div id="list">
    <p id="java">Java</p>
    <p id="python">Python</p>
    <p id="scheme">Scheme</p>
    <p id="haskell">Haskell</p>
</div>

2.insertBefore
parentElement.insertBefore(newElement, referenceElement);
子节点会插入到referenceElement之前


要把Haskell插入到Python之前：
<!-- HTML结构 -->
<div id="list">
    <p id="java">Java</p>
    <p id="python">Python</p>
    <p id="scheme">Scheme</p>
</div>
var
    list = document.getElementById('list'),
    ref = document.getElementById('python'),
    haskell = document.createElement('p');
haskell.id = 'haskell';
haskell.innerText = 'Haskell';
list.insertBefore(haskell, ref);

新的HTML结构如下：
<!-- HTML结构 -->
<div id="list">
    <p id="java">Java</p>
    <p id="haskell">Haskell</p>
    <p id="python">Python</p>
    <p id="scheme">Scheme</p>
</div>

(6)删除子节点
  先得到子节点和其父节点，再调用父节点的removeChild把自节点删掉
// 拿到待删除节点:
var self = document.getElementById('to-be-removed');
// 拿到父节点:
var parent = self.parentElement;
// 删除:
var removed = parent.removeChild(self);
removed === self; // true

注意：children属性是一个只读属性，并且它在子节点变化时会实时更新

对于如下HTML结构：

<div id="parent">
    <p>First</p>
    <p>Second</p>
</div>
当我们用如下代码删除子节点时：

var parent = document.getElementById('parent');
parent.removeChild(parent.children[0]);
parent.removeChild(parent.children[1]); // <-- 浏览器报错
浏览器报错：parent.children[1]不是一个有效的节点。原因就在于，当<p>First</p>节点被删除后，parent.children的节点数量已经从2变为了1，索引[1]已经不存在了。


23操作表单
  表单本身也是DOM树，
// <input type="text" id="email">
var input = document.getElementById('email');
input.value = 'test@example.com'; // 文本框的内容已更新

24回调
  由于JS为单线程，执行多任务实际上都是异步调用
因为是异步操作，所以我们在JavaScript代码中就不知道什么时候
操作结束，因此需要先设置一个回调函数。
reader.onload = function(e) {
    // 当文件读取完成后，自动调用此函数:
};

函数a有一个参数，这个参数是个函数b，当函数a执行完以后执行函数b。那么这个过程就叫回调
 参考：http://blog.csdn.net/lulei9876/article/details/8494337

24.2匿名函数
  function we(callback,something){   //we属于函数名
        something +='is cool';
        callback(something);
}
  we(function(somethion){console.log(something)},'jade') //把匿名函数当参数传入会直接执行

var cc = function(){}   //把一个匿名函数赋给变量




25AJAX
  标准写法和IE写法混在一起，可以这么写：
var request;
if (window.XMLHttpRequest) {
    request = new XMLHttpRequest();
} else {
    request = new ActiveXObject('Microsoft.XMLHTTP');
}


新的跨域策略：CORS

26promise
承诺将来会执行”的对象在JavaScript中称为Promise对象。
Promise最大的好处是在异步执行的流程中，把执行代码和处理结果的代码清晰地分离了


27canvas
































